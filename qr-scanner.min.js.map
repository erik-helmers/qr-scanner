{"version":3,"file":"qr-scanner.min.js","sources":["src/qr-scanner.ts"],"sourcesContent":["class QrScanner {\n    static readonly DEFAULT_CANVAS_SIZE = 400;\n    static readonly NO_QR_CODE_FOUND = 'No QR code found';\n    private static _disableBarcodeDetector = false;\n    private static _workerMessageId = 0;\n\n    /** @deprecated */\n    static set WORKER_PATH(workerPath: string) {\n        console.warn('Setting QrScanner.WORKER_PATH is not required and not supported anymore. '\n            + 'Have a look at the README for new setup instructions.');\n    }\n\n    static async hasCamera(): Promise<boolean> {\n        try {\n            return !!(await QrScanner.listCameras(false)).length;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    static async listCameras(requestLabels = false): Promise<Array<QrScanner.Camera>> {\n        if (!navigator.mediaDevices) return [];\n\n        const enumerateCameras = async (): Promise<Array<MediaDeviceInfo>> =>\n            (await navigator.mediaDevices.enumerateDevices()).filter((device) => device.kind === 'videoinput');\n\n        // Note that enumerateDevices can always be called and does not prompt the user for permission.\n        // However, enumerateDevices only includes device labels if served via https and an active media stream exists\n        // or permission to access the camera was given. Therefore, if we're not getting labels but labels are requested\n        // ask for camera permission by opening a stream.\n        let openedStream: MediaStream | undefined;\n        try {\n            if (requestLabels && (await enumerateCameras()).every((camera) => !camera.label)) {\n                openedStream = await navigator.mediaDevices.getUserMedia({ audio: false, video: true });\n            }\n        } catch (e) {\n            // Fail gracefully, especially if the device has no camera or on mobile when the camera is already in use\n            // and some browsers disallow a second stream.\n        }\n\n        try {\n            return (await enumerateCameras()).map((camera, i) => ({\n                id: camera.deviceId,\n                label: camera.label || (i === 0 ? 'Default Camera' : `Camera ${i + 1}`),\n            }));\n        } finally {\n            // close the stream we just opened for getting camera access for listing the device labels\n            if (openedStream) {\n                console.warn('Call listCameras after successfully starting a QR scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(openedStream);\n            }\n        }\n    }\n\n    readonly $video: HTMLVideoElement;\n    readonly $canvas: HTMLCanvasElement;\n    readonly $overlay?: HTMLDivElement;\n    private readonly $codeOutlineHighlight?: SVGSVGElement;\n    private readonly _onDecode?: (result: QrScanner.ScanResult) => void;\n    private readonly _legacyOnDecode?: (result: string) => void;\n    private readonly _legacyCanvasSize: number = QrScanner.DEFAULT_CANVAS_SIZE;\n    private _preferredCamera: QrScanner.FacingMode | QrScanner.DeviceId = 'environment';\n    private readonly _maxScansPerSecond: number = 25;\n    private _lastScanTimestamp: number = -1;\n    private _scanRegion: QrScanner.ScanRegion;\n    private _codeOutlineHighlightRemovalTimeout?: number;\n    private _qrEnginePromise: Promise<Worker | BarcodeDetector>\n    private _active: boolean = false;\n    private _paused: boolean = false;\n    private _flashOn: boolean = false;\n    private _destroyed: boolean = false;\n\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: QrScanner.ScanResult) => void,\n        options: {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: (result: string) => void,\n        onDecodeError?: (error: Error | string) => void,\n        canvasSize?: number,\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    );\n    /** @deprecated */\n    constructor(video: HTMLVideoElement, onDecode: (result: string) => void, canvasSize?: number);\n    constructor(\n        video: HTMLVideoElement,\n        onDecode: ((result: QrScanner.ScanResult) => void) | ((result: string) => void),\n        canvasSizeOrOnDecodeErrorOrOptions?: number | ((error: Error | string) => void) | {\n            onDecodeError?: (error: Error | string) => void,\n            calculateScanRegion?: (video: HTMLVideoElement) => QrScanner.ScanRegion,\n            preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n            maxScansPerSecond?: number;\n            highlightScanRegion?: boolean,\n            highlightCodeOutline?: boolean,\n            overlay?: HTMLDivElement,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n        canvasSizeOrCalculateScanRegion?: number | ((video: HTMLVideoElement) => QrScanner.ScanRegion),\n        preferredCamera?: QrScanner.FacingMode | QrScanner.DeviceId,\n    ) {\n        this.$video = video;\n        this.$canvas = document.createElement('canvas');\n\n        if (canvasSizeOrOnDecodeErrorOrOptions && typeof canvasSizeOrOnDecodeErrorOrOptions === 'object') {\n            // we got an options object using the new api\n            this._onDecode = onDecode as QrScanner['_onDecode'];\n        } else {\n            if (canvasSizeOrOnDecodeErrorOrOptions || canvasSizeOrCalculateScanRegion || preferredCamera) {\n                console.warn('You\\'re using a deprecated version of the QrScanner constructor which will be removed in '\n                    + 'the future');\n            } else {\n                // Only video and onDecode were specified and we can't distinguish between new or old api usage. For\n                // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n                // optional in the parameter list above to make clear that ScanResult instead of string is only passed\n                // if an options object was provided. However, in the future once legacy support is removed, the options\n                // object should become optional.\n                console.warn('Note that the type of the scan result passed to onDecode will change in the future. '\n                    + 'To already switch to the new api today, you can pass returnDetailedScanResult: true.');\n            }\n            this._legacyOnDecode = onDecode as QrScanner['_legacyOnDecode'];\n        }\n\n        const options = typeof canvasSizeOrOnDecodeErrorOrOptions === 'object'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : {};\n        this._onDecodeError = options.onDecodeError || (typeof canvasSizeOrOnDecodeErrorOrOptions === 'function'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : this._onDecodeError);\n        this._calculateScanRegion = options.calculateScanRegion || (typeof canvasSizeOrCalculateScanRegion==='function'\n            ? canvasSizeOrCalculateScanRegion\n            : this._calculateScanRegion);\n        this._preferredCamera = options.preferredCamera || preferredCamera || this._preferredCamera;\n        this._legacyCanvasSize = typeof canvasSizeOrOnDecodeErrorOrOptions === 'number'\n            ? canvasSizeOrOnDecodeErrorOrOptions\n            : typeof canvasSizeOrCalculateScanRegion === 'number'\n                ? canvasSizeOrCalculateScanRegion\n                : this._legacyCanvasSize;\n        this._maxScansPerSecond = options.maxScansPerSecond || this._maxScansPerSecond;\n\n        this._onPlay = this._onPlay.bind(this);\n        this._onLoadedMetaData = this._onLoadedMetaData.bind(this);\n        this._onVisibilityChange = this._onVisibilityChange.bind(this);\n        this._updateOverlay = this._updateOverlay.bind(this);\n\n        // @ts-ignore\n        video.disablePictureInPicture = true;\n        // Allow inline playback on iPhone instead of requiring full screen playback,\n        // see https://webkit.org/blog/6784/new-video-policies-for-ios/\n        // @ts-ignore\n        video.playsInline = true;\n        // Allow play() on iPhone without requiring a user gesture. Should not really be needed as camera stream\n        // includes no audio, but just to be safe.\n        video.muted = true;\n\n        // Avoid Safari stopping the video stream on a hidden video.\n        // See https://github.com/cozmo/jsQR/issues/185\n        let shouldHideVideo = false;\n        if (video.hidden) {\n            video.hidden = false;\n            shouldHideVideo = true;\n        }\n        if (!document.body.contains(video)) {\n            document.body.appendChild(video);\n            shouldHideVideo = true;\n        }\n        const videoContainer = video.parentElement!;\n\n        if (options.highlightScanRegion || options.highlightCodeOutline) {\n            const gotExternalOverlay = !!options.overlay;\n            this.$overlay = options.overlay || document.createElement('div');\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.position = 'absolute';\n            overlayStyle.display = 'none';\n            overlayStyle.pointerEvents = 'none';\n            this.$overlay.classList.add('scan-region-highlight');\n            if (!gotExternalOverlay && options.highlightScanRegion) {\n                // default style; can be overwritten via css, e.g. by changing the svg's stroke color, hiding the\n                // .scan-region-highlight-svg, setting a border, outline, background, etc.\n                this.$overlay.innerHTML = '<svg class=\"scan-region-highlight-svg\" viewBox=\"0 0 238 238\" '\n                    + 'preserveAspectRatio=\"none\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;'\n                    + 'fill:none;stroke:#e9b213;stroke-width:4;stroke-linecap:round;stroke-linejoin:round\">'\n                    + '<path d=\"M31 2H10a8 8 0 0 0-8 8v21M207 2h21a8 8 0 0 1 8 8v21m0 176v21a8 8 0 0 1-8 8h-21m-176 '\n                    + '0H10a8 8 0 0 1-8-8v-21\"/></svg>';\n                try {\n                    this.$overlay.firstElementChild!.animate({ transform: ['scale(.98)', 'scale(1.01)'] }, {\n                        duration: 400,\n                        iterations: Infinity,\n                        direction: 'alternate',\n                        easing: 'ease-in-out',\n                    });\n                } catch (e) {}\n                videoContainer.insertBefore(this.$overlay, this.$video.nextSibling);\n            }\n            if (options.highlightCodeOutline) {\n                // default style; can be overwritten via css\n                this.$overlay.insertAdjacentHTML(\n                    'beforeend',\n                    '<svg class=\"code-outline-highlight\" preserveAspectRatio=\"none\" style=\"display:none;width:100%;'\n                        + 'height:100%;fill:none;stroke:#e9b213;stroke-width:5;stroke-dasharray:25;'\n                        + 'stroke-linecap:round;stroke-linejoin:round\"><polygon/></svg>',\n                );\n                this.$codeOutlineHighlight = this.$overlay.lastElementChild as SVGSVGElement;\n            }\n        }\n        this._scanRegion = this._calculateScanRegion(video);\n\n        requestAnimationFrame(() => {\n            // Checking in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle.\n            const videoStyle = window.getComputedStyle(video);\n            if (videoStyle.display === 'none') {\n                video.style.setProperty('display', 'block', 'important');\n                shouldHideVideo = true;\n            }\n            if (videoStyle.visibility !== 'visible') {\n                video.style.setProperty('visibility', 'visible', 'important');\n                shouldHideVideo = true;\n            }\n            if (shouldHideVideo) {\n                // Hide the video in a way that doesn't cause Safari to stop the playback.\n                console.warn('QrScanner has overwritten the video hiding style to avoid Safari stopping the playback.');\n                video.style.opacity = '0';\n                video.style.width = '0';\n                video.style.height = '0';\n                if (this.$overlay && this.$overlay.parentElement) {\n                    this.$overlay.parentElement.removeChild(this.$overlay);\n                }\n                // @ts-ignore\n                delete this.$overlay!;\n                // @ts-ignore\n                delete this.$codeOutlineHighlight!;\n            }\n\n            if (this.$overlay) {\n                this._updateOverlay();\n            }\n        });\n\n        video.addEventListener('play', this._onPlay);\n        video.addEventListener('loadedmetadata', this._onLoadedMetaData);\n        document.addEventListener('visibilitychange', this._onVisibilityChange);\n        window.addEventListener('resize', this._updateOverlay);\n\n        this._qrEnginePromise = QrScanner.createQrEngine();\n    }\n\n    async hasFlash(): Promise<boolean> {\n        let stream: MediaStream | undefined;\n        try {\n            if (this.$video.srcObject) {\n                if (!(this.$video.srcObject instanceof MediaStream)) return false; // srcObject is not a camera stream\n                stream = this.$video.srcObject;\n            } else {\n                stream = (await this._getCameraStream()).stream;\n            }\n            return 'torch' in stream.getVideoTracks()[0].getSettings();\n        } catch (e) {\n            return false;\n        } finally {\n            // close the stream we just opened for detecting whether it supports flash\n            if (stream && stream !== this.$video.srcObject) {\n                console.warn('Call hasFlash after successfully starting the scanner to avoid creating '\n                    + 'a temporary video stream');\n                QrScanner._stopVideoStream(stream);\n            }\n        }\n    }\n\n    isFlashOn(): boolean {\n        return this._flashOn;\n    }\n\n    async toggleFlash(): Promise<void> {\n        if (this._flashOn) {\n            await this.turnFlashOff();\n        } else {\n            await this.turnFlashOn();\n        }\n    }\n\n    async turnFlashOn(): Promise<void> {\n        if (this._flashOn || this._destroyed) return;\n        this._flashOn = true;\n        if (!this._active || this._paused) return; // flash will be turned on later on .start()\n        try {\n            if (!await this.hasFlash()) throw 'No flash available';\n            // Note that the video track is guaranteed to exist and to be a MediaStream due to the check in hasFlash\n            await (this.$video.srcObject as MediaStream).getVideoTracks()[0].applyConstraints({\n                // @ts-ignore: constraint 'torch' is unknown to ts\n                advanced: [{ torch: true }],\n            });\n        } catch (e) {\n            this._flashOn = false;\n            throw e;\n        }\n    }\n\n    async turnFlashOff(): Promise<void> {\n        if (!this._flashOn) return;\n        // applyConstraints with torch: false does not work to turn the flashlight off, as a stream's torch stays\n        // continuously on, see https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackConstraints#torch. Therefore,\n        // we have to stop the stream to turn the flashlight off.\n        this._flashOn = false;\n        await this._restartVideoStream();\n    }\n\n    destroy(): void {\n        this.$video.removeEventListener('loadedmetadata', this._onLoadedMetaData);\n        this.$video.removeEventListener('play', this._onPlay);\n        document.removeEventListener('visibilitychange', this._onVisibilityChange);\n        window.removeEventListener('resize', this._updateOverlay);\n\n        this._destroyed = true;\n        this._flashOn = false;\n        this.stop(); // sets this._paused = true and this._active = false\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'close');\n    }\n\n    async start(): Promise<void> {\n        if (this._destroyed) throw new Error('The QR scanner can not be started as it had been destroyed.');\n        if (this._active && !this._paused) return;\n\n        if (window.location.protocol !== 'https:') {\n            // warn but try starting the camera anyways\n            console.warn('The camera stream is only accessible if the page is transferred via https.');\n        }\n\n        this._active = true;\n        if (document.hidden) return; // camera will be started as soon as tab is in foreground\n        this._paused = false;\n        if (this.$video.srcObject) {\n            // camera stream already/still set\n            await this.$video.play();\n            return;\n        }\n\n        try {\n            const { stream, facingMode } = await this._getCameraStream();\n            if (!this._active || this._paused) {\n                // was stopped in the meantime\n                QrScanner._stopVideoStream(stream);\n                return;\n            }\n            this._setVideoMirror(facingMode);\n            this.$video.srcObject = stream;\n            await this.$video.play();\n\n            // Restart the flash if it was previously on\n            if (this._flashOn) {\n                this._flashOn = false; // force turnFlashOn to restart the flash\n                this.turnFlashOn().catch(() => {});\n            }\n        } catch (e) {\n            if (this._paused) return;\n            this._active = false;\n            throw e;\n        }\n    }\n\n    stop(): void {\n        this.pause();\n        this._active = false;\n    }\n\n    async pause(stopStreamImmediately = false): Promise<boolean> {\n        this._paused = true;\n        if (!this._active) return true;\n        this.$video.pause();\n\n        if (this.$overlay) {\n            this.$overlay.style.display = 'none';\n        }\n\n        const stopStream = () => {\n            if (this.$video.srcObject instanceof MediaStream) {\n                // revoke srcObject only if it's a stream which was likely set by us\n                QrScanner._stopVideoStream(this.$video.srcObject);\n                this.$video.srcObject = null;\n            }\n        };\n\n        if (stopStreamImmediately) {\n            stopStream();\n            return true;\n        }\n\n        await new Promise((resolve) => setTimeout(resolve, 300));\n        if (!this._paused) return false;\n        stopStream();\n        return true;\n    }\n\n    async setCamera(facingModeOrDeviceId: QrScanner.FacingMode | QrScanner.DeviceId): Promise<void> {\n        if (facingModeOrDeviceId === this._preferredCamera) return;\n        this._preferredCamera = facingModeOrDeviceId;\n        // Restart the scanner with the new camera which will also update the video mirror and the scan region.\n        await this._restartVideoStream();\n    }\n\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        options: {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        },\n    ): Promise<QrScanner.ScanResult>;\n    /** @deprecated */\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegion?: QrScanner.ScanRegion | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing?: boolean,\n        alsoTryWithoutScanRegion?: boolean,\n    ): Promise<string>;\n    static async scanImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n        scanRegionOrOptions?: QrScanner.ScanRegion | {\n            scanRegion?: QrScanner.ScanRegion | null,\n            qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n            canvas?: HTMLCanvasElement | null,\n            disallowCanvasResizing?: boolean,\n            alsoTryWithoutScanRegion?: boolean,\n            /** just a temporary flag until we switch entirely to the new api */\n            returnDetailedScanResult?: true,\n        } | null,\n        qrEngine?: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector> | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing: boolean = false,\n        alsoTryWithoutScanRegion: boolean = false,\n    ): Promise<string | QrScanner.ScanResult> {\n        let scanRegion: QrScanner.ScanRegion | null | undefined;\n        let returnDetailedScanResult = false;\n        if (scanRegionOrOptions && (\n            'scanRegion' in scanRegionOrOptions\n            || 'qrEngine' in scanRegionOrOptions\n            || 'canvas' in scanRegionOrOptions\n            || 'disallowCanvasResizing' in scanRegionOrOptions\n            || 'alsoTryWithoutScanRegion' in scanRegionOrOptions\n            || 'returnDetailedScanResult' in scanRegionOrOptions\n        )) {\n            // we got an options object using the new api\n            scanRegion = scanRegionOrOptions.scanRegion;\n            qrEngine = scanRegionOrOptions.qrEngine;\n            canvas = scanRegionOrOptions.canvas;\n            disallowCanvasResizing = scanRegionOrOptions.disallowCanvasResizing || false;\n            alsoTryWithoutScanRegion = scanRegionOrOptions.alsoTryWithoutScanRegion || false;\n            returnDetailedScanResult = true;\n        } else if (scanRegionOrOptions || qrEngine || canvas || disallowCanvasResizing || alsoTryWithoutScanRegion) {\n            console.warn('You\\'re using a deprecated api for scanImage which will be removed in the future.');\n        } else {\n            // Only imageOrFileOrBlobOrUrl was specified and we can't distinguish between new or old api usage. For\n            // backwards compatibility we have to assume the old api for now. The options object is marked as non-\n            // optional in the parameter list above to make clear that ScanResult instead of string is only returned if\n            // an options object was provided. However, in the future once legacy support is removed, the options object\n            // should become optional.\n            console.warn('Note that the return type of scanImage will change in the future. To already switch to the '\n                + 'new api today, you can pass returnDetailedScanResult: true.');\n        }\n\n        const gotExternalEngine = !!qrEngine;\n\n        try {\n            let image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n                | SVGImageElement;\n            let canvasContext: CanvasRenderingContext2D;\n            [qrEngine, image] = await Promise.all([\n                qrEngine || QrScanner.createQrEngine(),\n                QrScanner._loadImage(imageOrFileOrBlobOrUrl),\n            ]);\n            [canvas, canvasContext] = QrScanner._drawToCanvas(image, scanRegion, canvas, disallowCanvasResizing);\n            let detailedScanResult: QrScanner.ScanResult;\n\n            if (qrEngine instanceof Worker) {\n                const qrEngineWorker = qrEngine; // for ts to know that it's still a worker later in the event listeners\n                if (!gotExternalEngine) {\n                    // Enable scanning of inverted color qr codes.\n                    QrScanner._postWorkerMessageSync(qrEngineWorker, 'inversionMode', 'both');\n                }\n                detailedScanResult = await new Promise((resolve, reject) => {\n                    let timeout: number;\n                    let onMessage: (event: MessageEvent) => void;\n                    let onError: (error: ErrorEvent | string) => void;\n                    let expectedResponseId = -1;\n                    onMessage = (event: MessageEvent) => {\n                        if (event.data.id !== expectedResponseId) {\n                            return;\n                        }\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        if (event.data.data !== null) {\n                            resolve({\n                                data: event.data.data,\n                                cornerPoints: QrScanner._convertPoints(event.data.cornerPoints, scanRegion),\n                            });\n                        } else {\n                            reject(QrScanner.NO_QR_CODE_FOUND);\n                        }\n                    };\n                    onError = (error: ErrorEvent | string) => {\n                        qrEngineWorker.removeEventListener('message', onMessage);\n                        qrEngineWorker.removeEventListener('error', onError);\n                        clearTimeout(timeout);\n                        const errorMessage = !error ? 'Unknown Error' : ((error as ErrorEvent).message || error);\n                        reject('Scanner error: ' + errorMessage);\n                    };\n                    qrEngineWorker.addEventListener('message', onMessage);\n                    qrEngineWorker.addEventListener('error', onError);\n                    timeout = setTimeout(() => onError('timeout'), 10000);\n                    const imageData = canvasContext.getImageData(0, 0, canvas!.width, canvas!.height);\n                    expectedResponseId = QrScanner._postWorkerMessageSync(\n                        qrEngineWorker,\n                        'decode',\n                        imageData,\n                        [imageData.data.buffer],\n                    );\n                });\n            } else {\n                detailedScanResult = await Promise.race([\n                    new Promise<QrScanner.ScanResult>((resolve, reject) => window.setTimeout(\n                        () => reject('Scanner error: timeout'),\n                        10000,\n                    )),\n                    (async (): Promise<QrScanner.ScanResult> => {\n                        try {\n                            const [scanResult] = await qrEngine.detect(canvas!);\n                            if (!scanResult) throw QrScanner.NO_QR_CODE_FOUND;\n                            return {\n                                data: scanResult.rawValue,\n                                cornerPoints: QrScanner._convertPoints(scanResult.cornerPoints, scanRegion),\n                            };\n                        } catch (e) {\n                            const errorMessage = (e as Error).message || e as string;\n                            if (/not implemented|service unavailable/.test(errorMessage)) {\n                                // Not implemented can apparently for some reason happen even though getSupportedFormats\n                                // in createQrScanner reported that it's supported, see issue #98.\n                                // Service unavailable can happen after some time when the BarcodeDetector crashed and\n                                // can theoretically be recovered from by creating a new BarcodeDetector. However, in\n                                // newer browsers this issue does not seem to be present anymore and therefore we do not\n                                // apply this optimization anymore but just set _disableBarcodeDetector in both cases.\n                                // Also note that if we got an external qrEngine that crashed, we should possibly notify\n                                // the caller about it, but we also don't do this here, as it's such an unlikely case.\n                                QrScanner._disableBarcodeDetector = true;\n                                // retry without passing the broken BarcodeScanner instance\n                                return QrScanner.scanImage(imageOrFileOrBlobOrUrl, {\n                                    scanRegion,\n                                    canvas,\n                                    disallowCanvasResizing,\n                                    alsoTryWithoutScanRegion,\n                                });\n                            }\n                            throw `Scanner error: ${errorMessage}`;\n                        }\n                    })(),\n                ]);\n            }\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } catch (e) {\n            if (!scanRegion || !alsoTryWithoutScanRegion) throw e;\n            const detailedScanResult = await QrScanner.scanImage(\n                imageOrFileOrBlobOrUrl,\n                { qrEngine, canvas, disallowCanvasResizing },\n            );\n            return returnDetailedScanResult ? detailedScanResult : detailedScanResult.data;\n        } finally {\n            if (!gotExternalEngine) {\n                QrScanner._postWorkerMessage(qrEngine!, 'close');\n            }\n        }\n    }\n\n    setGrayscaleWeights(red: number, green: number, blue: number, useIntegerApproximation: boolean = true): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations work also well with colored qr codes.\n        QrScanner._postWorkerMessage(\n            this._qrEnginePromise,\n            'grayscaleWeights',\n            { red, green, blue, useIntegerApproximation }\n        );\n    }\n\n    setInversionMode(inversionMode: QrScanner.InversionMode): void {\n        // Note that for the native BarcodeDecoder or if the worker was destroyed, this is a no-op. However, the native\n        // implementations scan normal and inverted qr codes by default\n        QrScanner._postWorkerMessage(this._qrEnginePromise, 'inversionMode', inversionMode);\n    }\n\n    static async createQrEngine(): Promise<Worker | BarcodeDetector>;\n    /** @deprecated */\n    static async createQrEngine(workerPath: string): Promise<Worker | BarcodeDetector>;\n    static async createQrEngine(workerPath?: string): Promise<Worker | BarcodeDetector> {\n        if (workerPath) {\n            console.warn('Specifying a worker path is not required and not supported anymore.');\n        }\n        const useNativeBarcodeDetector = !QrScanner._disableBarcodeDetector\n            && ('BarcodeDetector' in window && BarcodeDetector.getSupportedFormats\n                ? (await BarcodeDetector.getSupportedFormats()).includes('qr_code')\n                : false);\n        return useNativeBarcodeDetector\n            ? new BarcodeDetector()\n            // @ts-ignore no types defined\n            : (import('./qr-scanner-worker.min.js') as Promise<{ createWorker: () => Worker }>)\n                .then((module) => module.createWorker());\n    }\n\n    private _onPlay(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n        if (this.$overlay) {\n            this.$overlay.style.display = '';\n        }\n        this._scanFrame();\n    }\n\n    private _onLoadedMetaData(): void {\n        this._scanRegion = this._calculateScanRegion(this.$video);\n        this._updateOverlay();\n    }\n\n    private _onVisibilityChange(): void {\n        if (document.hidden) {\n            this.pause();\n        } else if (this._active) {\n            this.start();\n        }\n    }\n\n    private _calculateScanRegion(video: HTMLVideoElement): QrScanner.ScanRegion {\n        // Default scan region calculation. Note that this can be overwritten in the constructor.\n        const smallestDimension = Math.min(video.videoWidth, video.videoHeight);\n        const scanRegionSize = Math.round(2 / 3 * smallestDimension);\n        return {\n            x: Math.round((video.videoWidth - scanRegionSize) / 2),\n            y: Math.round((video.videoHeight - scanRegionSize) / 2),\n            width: scanRegionSize,\n            height: scanRegionSize,\n            downScaledWidth: this._legacyCanvasSize,\n            downScaledHeight: this._legacyCanvasSize,\n        };\n    }\n\n    private _updateOverlay(): void {\n        requestAnimationFrame(() => {\n            // Running in requestAnimationFrame which should avoid a potential additional re-flow for getComputedStyle\n            // and offsetWidth, offsetHeight, offsetLeft, offsetTop.\n            if (!this.$overlay) return;\n            const video = this.$video;\n            const videoWidth = video.videoWidth;\n            const videoHeight = video.videoHeight;\n            const elementWidth = video.offsetWidth;\n            const elementHeight = video.offsetHeight;\n            const elementX = video.offsetLeft;\n            const elementY = video.offsetTop;\n\n            const videoStyle = window.getComputedStyle(video);\n            const videoObjectFit = videoStyle.objectFit;\n            const videoAspectRatio = videoWidth / videoHeight;\n            const elementAspectRatio = elementWidth / elementHeight;\n            let videoScaledWidth: number;\n            let videoScaledHeight: number;\n            switch (videoObjectFit) {\n                case 'none':\n                    videoScaledWidth = videoWidth;\n                    videoScaledHeight = videoHeight;\n                    break;\n                case 'fill':\n                    videoScaledWidth = elementWidth;\n                    videoScaledHeight = elementHeight;\n                    break;\n                default: // 'cover', 'contains', 'scale-down'\n                    if (videoObjectFit === 'cover'\n                        ? videoAspectRatio > elementAspectRatio\n                        : videoAspectRatio < elementAspectRatio) {\n                        // The scaled height is the element height\n                        // - for 'cover' if the video aspect ratio is wider than the element aspect ratio\n                        //   (scaled height matches element height and scaled width overflows element width)\n                        // - for 'contains'/'scale-down' if element aspect ratio is wider than the video aspect ratio\n                        //   (scaled height matched element height and element width overflows scaled width)\n                        videoScaledHeight = elementHeight;\n                        videoScaledWidth = videoScaledHeight * videoAspectRatio;\n                    } else {\n                        videoScaledWidth = elementWidth;\n                        videoScaledHeight = videoScaledWidth / videoAspectRatio;\n                    }\n                    if (videoObjectFit === 'scale-down') {\n                        // for 'scale-down' the dimensions are the minimum of 'contains' and 'none'\n                        videoScaledWidth = Math.min(videoScaledWidth, videoWidth);\n                        videoScaledHeight = Math.min(videoScaledHeight, videoHeight);\n                    }\n            }\n\n            // getComputedStyle is so nice to convert keywords (left, center, right, top, bottom) to percent and makes\n            // sure to set the default of 50% if only one or no component was provided, therefore we can be sure that\n            // both components are set. Additionally, it converts units other than px (e.g. rem) to px.\n            const [videoX, videoY] = videoStyle.objectPosition.split(' ').map((length, i) => {\n                const lengthValue = parseFloat(length);\n                return length.endsWith('%')\n                    ? (!i ? elementWidth - videoScaledWidth : elementHeight - videoScaledHeight) * lengthValue / 100\n                    : lengthValue;\n            });\n\n            const regionWidth = this._scanRegion.width || videoWidth;\n            const regionHeight = this._scanRegion.height || videoHeight;\n            const regionX = this._scanRegion.x || 0;\n            const regionY = this._scanRegion.y || 0;\n\n            const overlayStyle = this.$overlay.style;\n            overlayStyle.width = `${regionWidth / videoWidth * videoScaledWidth}px`;\n            overlayStyle.height = `${regionHeight / videoHeight * videoScaledHeight}px`;\n            overlayStyle.top = `${elementY + videoY + regionY / videoHeight * videoScaledHeight}px`;\n            const isVideoMirrored = /scaleX\\(-1\\)/.test(video.style.transform!);\n            overlayStyle.left = `${elementX\n                + (isVideoMirrored ? elementWidth - videoX - videoScaledWidth : videoX)\n                + (isVideoMirrored ? videoWidth - regionX - regionWidth : regionX) / videoWidth * videoScaledWidth}px`;\n            // apply same mirror as on video\n            overlayStyle.transform = video.style.transform;\n        });\n    }\n\n    private static _convertPoints(\n        points: QrScanner.Point[],\n        scanRegion?: QrScanner.ScanRegion | null,\n    ): QrScanner.Point[] {\n        if (!scanRegion) return points;\n        const offsetX = scanRegion.x || 0;\n        const offsetY = scanRegion.y || 0;\n        const scaleFactorX = scanRegion.width && scanRegion.downScaledWidth\n            ? scanRegion.width / scanRegion.downScaledWidth\n            : 1;\n        const scaleFactorY = scanRegion.height && scanRegion.downScaledHeight\n            ? scanRegion.height / scanRegion.downScaledHeight\n            : 1;\n        for (const point of points) {\n            point.x = point.x * scaleFactorX + offsetX;\n            point.y = point.y * scaleFactorY + offsetY;\n        }\n        return points;\n    }\n\n    private _scanFrame(): void {\n        if (!this._active || this.$video.paused || this.$video.ended) return;\n        // If requestVideoFrameCallback is available use that to avoid unnecessary scans on the same frame as the\n        // camera's framerate can be lower than the screen refresh rate and this._maxScansPerSecond, especially in dark\n        // settings where the exposure time is longer. Both, requestVideoFrameCallback and requestAnimationFrame are not\n        // being fired if the tab is in the background, which is what we want.\n        const requestFrame = 'requestVideoFrameCallback' in this.$video\n            // @ts-ignore\n            ? this.$video.requestVideoFrameCallback.bind(this.$video)\n            : requestAnimationFrame;\n        requestFrame(async () => {\n            if (this.$video.readyState <= 1) {\n                // Skip scans until the video is ready as drawImage() only works correctly on a video with readyState\n                // > 1, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage#Notes.\n                // This also avoids false positives for videos paused after a successful scan which remains visible on\n                // the canvas until the video is started again and ready.\n                this._scanFrame();\n                return;\n            }\n\n            const timeSinceLastScan = Date.now() - this._lastScanTimestamp;\n            const minimumTimeBetweenScans = 1000 / this._maxScansPerSecond;\n            if (timeSinceLastScan < minimumTimeBetweenScans) {\n                await new Promise((resolve) => setTimeout(resolve, minimumTimeBetweenScans - timeSinceLastScan));\n            }\n            // console.log('Scan rate:', Math.round(1000 / (Date.now() - this._lastScanTimestamp)));\n            this._lastScanTimestamp = Date.now();\n\n            let result: QrScanner.ScanResult | undefined;\n            try {\n                result = await QrScanner.scanImage(this.$video, {\n                    scanRegion: this._scanRegion,\n                    qrEngine: this._qrEnginePromise,\n                    canvas: this.$canvas,\n                });\n            } catch (error) {\n                if (!this._active) return;\n                this._onDecodeError(error as Error | string);\n            }\n\n            if (QrScanner._disableBarcodeDetector && !(await this._qrEnginePromise instanceof Worker)) {\n                // replace the disabled BarcodeDetector\n                this._qrEnginePromise = QrScanner.createQrEngine();\n            }\n\n            if (result) {\n                if (this._onDecode) {\n                    this._onDecode(result);\n                } else if (this._legacyOnDecode) {\n                    this._legacyOnDecode(result.data);\n                }\n\n                if (this.$codeOutlineHighlight) {\n                    clearTimeout(this._codeOutlineHighlightRemovalTimeout);\n                    this._codeOutlineHighlightRemovalTimeout = undefined;\n                    this.$codeOutlineHighlight.setAttribute(\n                        'viewBox',\n                        `${this._scanRegion.x || 0} `\n                            + `${this._scanRegion.y || 0} `\n                            + `${this._scanRegion.width || this.$video.videoWidth} `\n                            + `${this._scanRegion.height || this.$video.videoHeight}`,\n                    );\n                    const polygon = this.$codeOutlineHighlight.firstElementChild!;\n                    polygon.setAttribute('points', result.cornerPoints.map(({x, y}) => `${x},${y}`).join(' '));\n                    this.$codeOutlineHighlight.style.display = '';\n                }\n            } else if (this.$codeOutlineHighlight && !this._codeOutlineHighlightRemovalTimeout) {\n                // hide after timeout to make it flash less when on some frames the QR code is detected and on some not\n                this._codeOutlineHighlightRemovalTimeout = setTimeout(\n                    () => this.$codeOutlineHighlight!.style.display = 'none',\n                    100,\n                );\n            }\n\n            this._scanFrame();\n        });\n    }\n\n    private _onDecodeError(error: Error | string): void {\n        // default error handler; can be overwritten in the constructor\n        if (error === QrScanner.NO_QR_CODE_FOUND) return;\n        console.log(error);\n    }\n\n    private async _getCameraStream(): Promise<{ stream: MediaStream, facingMode: QrScanner.FacingMode }> {\n        if (!navigator.mediaDevices) throw 'Camera not found.';\n\n        const preferenceType = /^(environment|user)$/.test(this._preferredCamera)\n            ? 'facingMode'\n            : 'deviceId';\n        const constraintsWithoutCamera: Array<MediaTrackConstraints> = [{\n            width: { min: 1024 }\n        }, {\n            width: { min: 768 }\n        }, {}];\n        const constraintsWithCamera = constraintsWithoutCamera.map((constraint) => Object.assign({}, constraint, {\n            [preferenceType]: { exact: this._preferredCamera },\n        }));\n\n        for (const constraints of [...constraintsWithCamera, ...constraintsWithoutCamera]) {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({ video: constraints, audio: false });\n                // Try to determine the facing mode from the stream, otherwise use a guess or 'environment' as\n                // default. Note that the guess is not always accurate as Safari returns cameras of different facing\n                // mode, even for exact facingMode constraints.\n                const facingMode = this._getFacingMode(stream)\n                    || (constraints.facingMode\n                        ? this._preferredCamera as QrScanner.FacingMode // a facing mode we were able to fulfill\n                        : (this._preferredCamera === 'environment'\n                            ? 'user' // switch as _preferredCamera was environment but we are not able to fulfill it\n                            : 'environment' // switch from unfulfilled user facingMode or default to environment\n                        )\n                    );\n                return { stream, facingMode };\n            } catch (e) {}\n        }\n\n        throw 'Camera not found.';\n    }\n\n    private async _restartVideoStream(): Promise<void> {\n        // Note that we always pause the stream and not only if !this._paused as even if this._paused === true, the\n        // stream might still be running, as it's by default only stopped after a delay of 300ms.\n        const wasPaused = this._paused;\n        const paused = await this.pause(true);\n        if (!paused || wasPaused || !this._active) return;\n        await this.start();\n    }\n\n    private static _stopVideoStream(stream : MediaStream): void {\n        for (const track of stream.getTracks()) {\n            track.stop(); //  note that this will also automatically turn the flashlight off\n            stream.removeTrack(track);\n        }\n    }\n\n    private _setVideoMirror(facingMode: QrScanner.FacingMode): void {\n        // in user facing mode mirror the video to make it easier for the user to position the QR code\n        const scaleFactor = facingMode === 'user'? -1 : 1;\n        this.$video.style.transform = 'scaleX(' + scaleFactor + ')';\n    }\n\n    private _getFacingMode(videoStream: MediaStream): QrScanner.FacingMode | null {\n        const videoTrack = videoStream.getVideoTracks()[0];\n        if (!videoTrack) return null; // unknown\n        // inspired by https://github.com/JodusNodus/react-qr-reader/blob/master/src/getDeviceId.js#L13\n        return /rear|back|environment/i.test(videoTrack.label)\n            ? 'environment'\n            : /front|user|face/i.test(videoTrack.label)\n                ? 'user'\n                : null; // unknown\n    }\n\n    private static _drawToCanvas(\n        image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement,\n        scanRegion?: QrScanner.ScanRegion | null,\n        canvas?: HTMLCanvasElement | null,\n        disallowCanvasResizing= false,\n    ): [HTMLCanvasElement, CanvasRenderingContext2D] {\n        canvas = canvas || document.createElement('canvas');\n        const scanRegionX = scanRegion && scanRegion.x ? scanRegion.x : 0;\n        const scanRegionY = scanRegion && scanRegion.y ? scanRegion.y : 0;\n        const scanRegionWidth = scanRegion && scanRegion.width\n            ? scanRegion.width\n            : (image as HTMLVideoElement).videoWidth || image.width as number;\n        const scanRegionHeight = scanRegion && scanRegion.height\n            ? scanRegion.height\n            : (image as HTMLVideoElement).videoHeight || image.height as number;\n\n        if (!disallowCanvasResizing) {\n            const canvasWidth = scanRegion && scanRegion.downScaledWidth\n                ? scanRegion.downScaledWidth\n                : scanRegionWidth;\n            const canvasHeight = scanRegion && scanRegion.downScaledHeight\n                ? scanRegion.downScaledHeight\n                : scanRegionHeight;\n            // Setting the canvas width or height clears the canvas, even if the values didn't change, therefore only\n            // set them if they actually changed.\n            if (canvas.width !== canvasWidth) {\n                canvas.width = canvasWidth;\n            }\n            if (canvas.height !== canvasHeight) {\n                canvas.height = canvasHeight;\n            }\n        }\n\n        const context = canvas.getContext('2d', { alpha: false })!;\n        context.imageSmoothingEnabled = false; // gives less blurry images\n        context.drawImage(\n            image,\n            scanRegionX, scanRegionY, scanRegionWidth, scanRegionHeight,\n            0, 0, canvas.width, canvas.height,\n        );\n        return [canvas, context];\n    }\n\n    private static async _loadImage(\n        imageOrFileOrBlobOrUrl: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n            | SVGImageElement | File | Blob | URL | String,\n    ): Promise<HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | OffscreenCanvas | ImageBitmap\n        | SVGImageElement > {\n        if (imageOrFileOrBlobOrUrl instanceof Image) {\n            await QrScanner._awaitImageLoad(imageOrFileOrBlobOrUrl);\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof HTMLVideoElement\n            || imageOrFileOrBlobOrUrl instanceof HTMLCanvasElement\n            || imageOrFileOrBlobOrUrl instanceof SVGImageElement\n            || 'OffscreenCanvas' in window && imageOrFileOrBlobOrUrl instanceof OffscreenCanvas\n            || 'ImageBitmap' in window && imageOrFileOrBlobOrUrl instanceof ImageBitmap) {\n            return imageOrFileOrBlobOrUrl;\n        } else if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob\n            || imageOrFileOrBlobOrUrl instanceof URL || typeof imageOrFileOrBlobOrUrl === 'string') {\n            const image = new Image();\n            if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                image.src = URL.createObjectURL(imageOrFileOrBlobOrUrl);\n            } else {\n                image.src = imageOrFileOrBlobOrUrl.toString();\n            }\n            try {\n                await QrScanner._awaitImageLoad(image);\n                return image;\n            } finally {\n                if (imageOrFileOrBlobOrUrl instanceof File || imageOrFileOrBlobOrUrl instanceof Blob) {\n                    URL.revokeObjectURL(image.src);\n                }\n            }\n        } else {\n            throw 'Unsupported image type.';\n        }\n    }\n\n    private static async _awaitImageLoad(image: HTMLImageElement): Promise<void> {\n        if (image.complete && image.naturalWidth !== 0) return; // already loaded\n        await new Promise<void>((resolve, reject) => {\n            const listener = (event: ErrorEvent | Event) => {\n                image.removeEventListener('load', listener);\n                image.removeEventListener('error', listener);\n                if (event instanceof ErrorEvent) {\n                    reject('Image load error');\n                } else {\n                    resolve();\n                }\n            };\n            image.addEventListener('load', listener);\n            image.addEventListener('error', listener);\n        });\n    }\n\n    private static async _postWorkerMessage(\n        qrEngineOrQrEnginePromise: Worker | BarcodeDetector | Promise<Worker | BarcodeDetector>,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): Promise<number> {\n        return QrScanner._postWorkerMessageSync(await qrEngineOrQrEnginePromise, type, data, transfer);\n    }\n\n    // sync version of _postWorkerMessage without performance overhead of async functions\n    private static _postWorkerMessageSync(\n        qrEngine: Worker | BarcodeDetector,\n        type: string,\n        data?: any,\n        transfer?: Transferable[],\n    ): number {\n        if (!(qrEngine instanceof Worker)) return -1;\n        const id = QrScanner._workerMessageId++;\n        qrEngine.postMessage({\n            id,\n            type,\n            data,\n        }, transfer);\n        return id;\n    }\n}\n\ndeclare namespace QrScanner {\n    export interface ScanRegion {\n        x?: number;\n        y?: number;\n        width?: number;\n        height?: number;\n        downScaledWidth?: number;\n        downScaledHeight?: number;\n    }\n\n    export type FacingMode = 'environment' | 'user';\n    export type DeviceId = string;\n\n    export interface Camera {\n        id: DeviceId;\n        label: string;\n    }\n\n    export type InversionMode = 'original' | 'invert' | 'both';\n\n    export interface Point {\n        x: number;\n        y: number;\n    }\n\n    export interface ScanResult {\n        data: string;\n        // In clockwise order, starting at top left, but this might not be guaranteed in the future.\n        cornerPoints: QrScanner.Point[];\n    }\n}\n\n// simplified from https://wicg.github.io/shape-detection-api/#barcode-detection-api\ndeclare class BarcodeDetector {\n    constructor(options?: { formats: string[] });\n    static getSupportedFormats(): Promise<string[]>;\n    detect(image: ImageBitmapSource): Promise<Array<{ rawValue: string, cornerPoints: QrScanner.Point[] }>>;\n}\n\nexport default QrScanner;\n"],"names":["QrScanner","constructor","video","onDecode","canvasSizeOrOnDecodeErrorOrOptions","canvasSizeOrCalculateScanRegion","preferredCamera","_legacyCanvasSize","DEFAULT_CANVAS_SIZE","_preferredCamera","_maxScansPerSecond","_lastScanTimestamp","_destroyed","_flashOn","_paused","_active","$video","$canvas","document","createElement","_onDecode","console","warn","_legacyOnDecode","_onDecodeError","options","onDecodeError","_calculateScanRegion","calculateScanRegion","maxScansPerSecond","_onPlay","bind","_onLoadedMetaData","_onVisibilityChange","_updateOverlay","disablePictureInPicture","playsInline","muted","shouldHideVideo","hidden","body","contains","appendChild","parentElement","highlightScanRegion","highlightCodeOutline","gotExternalOverlay","overlay","$overlay","overlayStyle","style","position","display","pointerEvents","classList","add","innerHTML","firstElementChild","animate","transform","duration","iterations","Infinity","direction","easing","e","videoContainer","insertBefore","nextSibling","insertAdjacentHTML","$codeOutlineHighlight","lastElementChild","_scanRegion","requestAnimationFrame","videoStyle","window","getComputedStyle","setProperty","visibility","opacity","width","height","removeChild","addEventListener","_qrEnginePromise","createQrEngine","workerPath","hasCamera","length","listCameras","requestLabels","navigator","mediaDevices","enumerateCameras","filter","enumerateDevices","device","kind","openedStream","every","camera","label","getUserMedia","audio","map","i","id","deviceId","_stopVideoStream","hasFlash","stream","srcObject","MediaStream","_getCameraStream","getVideoTracks","getSettings","isFlashOn","toggleFlash","turnFlashOff","turnFlashOn","applyConstraints","advanced","torch","_restartVideoStream","destroy","removeEventListener","stop","_postWorkerMessage","start","Error","location","protocol","play","facingMode","_setVideoMirror","catch","pause","stopStreamImmediately","stopStream","Promise","resolve","setTimeout","setCamera","facingModeOrDeviceId","scanImage","imageOrFileOrBlobOrUrl","scanRegionOrOptions","qrEngine","canvas","disallowCanvasResizing","alsoTryWithoutScanRegion","scanRegion","returnDetailedScanResult","image","canvasContext","all","_loadImage","_drawToCanvas","detailedScanResult","Worker","qrEngineWorker","gotExternalEngine","_postWorkerMessageSync","reject","timeout","onMessage","onError","expectedResponseId","event","data","clearTimeout","cornerPoints","_convertPoints","NO_QR_CODE_FOUND","error","errorMessage","message","imageData","buffer","race","scanResult","detect","rawValue","test","_disableBarcodeDetector","setGrayscaleWeights","red","green","blue","useIntegerApproximation","setInversionMode","inversionMode","BarcodeDetector","getSupportedFormats","includes","import_585","then","module","createWorker","_scanFrame","scanRegionSize","Math","round","min","smallestDimension","videoWidth","videoHeight","x","y","downScaledWidth","downScaledHeight","offsetWidth","offsetHeight","offsetLeft","offsetTop","objectFit","elementWidth","elementHeight","videoObjectFit","videoScaledWidth","videoScaledHeight","videoAspectRatio","elementAspectRatio","videoX","videoY","objectPosition","split","lengthValue","parseFloat","endsWith","regionWidth","regionHeight","regionX","regionY","top","elementY","isVideoMirrored","left","elementX","points","offsetX","offsetY","scaleFactorX","scaleFactorY","point","paused","ended","requestFrame","requestVideoFrameCallback","readyState","timeSinceLastScan","Date","now","minimumTimeBetweenScans","result","_codeOutlineHighlightRemovalTimeout","undefined","setAttribute","join","log","preferenceType","constraintsWithoutCamera","constraint","Object","exact","constraints","constraintsWithCamera","_getFacingMode","wasPaused","track","removeTrack","scaleFactor","videoStream","videoTrack","scanRegionX","scanRegionY","scanRegionWidth","scanRegionHeight","canvasWidth","canvasHeight","context","getContext","alpha","imageSmoothingEnabled","drawImage","Image","_awaitImageLoad","HTMLVideoElement","HTMLCanvasElement","SVGImageElement","OffscreenCanvas","ImageBitmap","File","Blob","URL","src","createObjectURL","toString","revokeObjectURL","complete","naturalWidth","listener","ErrorEvent","qrEngineOrQrEnginePromise","type","transfer","postMessage","_workerMessageId"],"mappings":"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"}